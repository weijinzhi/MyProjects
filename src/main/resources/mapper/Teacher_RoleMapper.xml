<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zstu.dao.Teacher_RoleMapper">
	<resultMap id="BaseResultMap" type="com.zstu.bean.Teacher_Role">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="role_id" jdbcType="INTEGER" property="roleId" />
		<result column="teacher_id" jdbcType="INTEGER" property="teacherId" />
	</resultMap>
	<!-- ================================================================== -->
	<resultMap type="com.zstu.bean.Teacher_Role" id="listRole">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="role_id" jdbcType="INTEGER" property="roleId" />
		<result column="teacher_id" jdbcType="INTEGER" property="teacherId" />
		<association property="teacher" javaType="Teacher"
			resultMap="teacher" />
		<association property="role" javaType="Role" resultMap="role" />
	</resultMap>
	<resultMap type="com.zstu.bean.Teacher" id="teacher">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="teacher_id" jdbcType="VARCHAR" property="teacherId" />
		<result column="teacher_name" jdbcType="VARCHAR" property="teacherName" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="sex" jdbcType="CHAR" property="sex" />
		<result column="academy" jdbcType="VARCHAR" property="academy" />
	</resultMap>
	<resultMap type="com.zstu.bean.Role" id="role">
		<id column="id" property="id" />
		<result column="role_name" jdbcType="VARCHAR" property="roleName" />
	</resultMap>
	<!-- ================================================================== -->
	<select id="listRole" parameterType="java.lang.String"
		resultType="com.zstu.bean.Teacher_Role" resultMap="listRole">
		SELECT *
		FROM teacher
		t,teacher_role tr,role r
		WHERE
		t.id=tr.teacher_id and r.id=tr.role_id
	</select>
	<!-- =========================================================================== -->
	<update id="updateTeacher_Role" parameterType="map">
		UPDATE teacher_role
		SET teacher_role.role_id=
		(SELECT role.id FROM role WHERE role.role_name=#{roleName,jdbcType=VARCHAR})
		WHERE teacher_role.teacher_id=#{id,jdbcType=INTEGER}
	</update>
	<!-- ================================================================================== -->
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, role_id, teacher_id
	</sql>
	<select id="selectByExample" parameterType="com.zstu.bean.Teacher_RoleExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from teacher_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from teacher_role
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		teacher_role
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.zstu.bean.Teacher_RoleExample">
		delete from teacher_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.zstu.bean.Teacher_Role">
		insert into teacher_role (id,
		role_id, teacher_id
		)
		values (#{id,jdbcType=INTEGER},
		#{roleId,jdbcType=INTEGER},
		#{teacherId,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.zstu.bean.Teacher_Role">
		insert into teacher_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="roleId != null">
				role_id,
			</if>
			<if test="teacherId != null">
				teacher_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="roleId != null">
				#{roleId,jdbcType=INTEGER},
			</if>
			<if test="teacherId != null">
				#{teacherId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.zstu.bean.Teacher_RoleExample"
		resultType="java.lang.Long">
		select count(*) from teacher_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update teacher_role
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.roleId != null">
				role_id = #{record.roleId,jdbcType=INTEGER},
			</if>
			<if test="record.teacherId != null">
				teacher_id = #{record.teacherId,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update teacher_role
		set id = #{record.id,jdbcType=INTEGER},
		role_id =
		#{record.roleId,jdbcType=INTEGER},
		teacher_id =
		#{record.teacherId,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.zstu.bean.Teacher_Role">
		update teacher_role
		<set>
			<if test="roleId != null">
				role_id = #{roleId,jdbcType=INTEGER},
			</if>
			<if test="teacherId != null">
				teacher_id = #{teacherId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.zstu.bean.Teacher_Role">
		update
		teacher_role
		set role_id = #{roleId,jdbcType=INTEGER},
		teacher_id =
		#{teacherId,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>